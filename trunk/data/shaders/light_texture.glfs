//#define UNF_M_W              "mat_world"
//#define UNF_M_WV             "mat_world_view"
//#define UNF_M_WVP            "mat_world_view_projection"
//#define UNF_M_WI             "mat_world_inverse"
//#define UNF_M_WVI            "mat_world_view_inverse"
//#define UNF_M_WVPI           "mat_world_view_projection_inverse"
//#define UNF_M_WIT            "mat_world_inverse_transpose"
//#define UNF_M_WVIT           "mat_world_view_inverse_transpose"
//#define UNF_M_WVPIT          "mat_world_view_projection_inverse_transpose"
//#define UNF_M_V              "mat_view"
//#define UNF_M_VP             "mat_view_projection"
//#define UNF_M_VI             "mat_view_inverse"
//#define UNF_M_VPI            "mat_view_projection_inverse"
//#define UNF_M_VIT            "mat_view_inverse_transpose"
//#define UNF_M_VPIT           "mat_view_projection_inverse_transpose"
//#define UNF_M_P              "mat_projction"
//#define UNF_M_PI             "mat_projection_inverse"
//#define UNF_M_PIT            "mat_projection_inverse_transpose"
//#define UNF_V_VP             "vec_viewer_position"
//#define UNF_V_VD             "vec_viewer_direction"
//#define UNF_V_VU             "vec_viewer_up"
//#define UNF_V_GAC            "vec_global_ambient_color"
////////////////////////////////////////
// Global variable
////////////////////////////////////////

//struct Light
//{
//    vec4 data0; // light type | 预留 | 预留 | 预留 
//    vec4 data1; // intensity | range | outer cone | inner cone
//    vec3 position;
//    vec3 direction;
//    vec3 diffuse;
//    vec3 specular;
//};

//struct Material
//{
//    vec3 ambient;
//    vec3 diffuse;
//    vec3 specular;
//    vec3 emissive;
//    float shininess;
//};

const int c_numberOfLights = 8;

uniform int u_numberOfLights;

uniform vec3 u_globalAmbient;   // 全局环境光.
uniform vec3 u_eyePosition;		// 眼睛的位置 in world space

uniform vec3 u_lightPosition[c_numberOfLights];   // in world space.
uniform vec3 u_lightDirection[c_numberOfLights];  // in world space.
uniform vec4 u_lightData0[c_numberOfLights];      // light type | Lambert 参数 | 预留 | 预留 
uniform vec4 u_lightData1[c_numberOfLights];      // intensity | range | outer cone | inner cone
uniform vec3 u_lightDiffuse[c_numberOfLights];    // light diffuse
uniform vec3 u_lightSpecular[c_numberOfLights];   // light specular

uniform vec3 u_materialAmbient;
uniform vec3 u_materialDiffuse;
uniform vec3 u_materialSpecular;
uniform vec4 u_materialData0;

//uniform Light u_lights;         // 光照
//uniform Material u_material;    // 材质

varying vec3 ps_vertexPosition; // in view space
varying vec3 ps_vertexNormal;
varying vec2 ps_textureCoord;


// Values that stay constant for the whole mesh.
uniform sampler2D sampler_diffuse;


////////////////////////////////////////
float Lambert( vec3 normalDir, 
                    vec3 lightDir, float factor)
{
    // Kajiya_Kay漫反射
	//float TdotL = float3::dot( tangentDir, lightDir );
	//diffuse = sqrt(1.f - TdotL * TdotL );
    
    // Half-Lambert漫反射
    //float NdotL = dot(normalDir, lightDir);
    //return max(0.0, (NdotL * 0.5 + 0.5));
	
	// 参数式Lambert漫反射
	float NdotL = dot(normalDir, lightDir);
	return max(0.0, (NdotL * (1.0 - factor) + factor));
}

////////////////////////////////////////
// Fragment Shader Function
////////////////////////////////////////
void main()
{
    vec3 ambient = u_globalAmbient * u_materialAmbient * texture2D(sampler_diffuse, ps_textureCoord);
    vec3 diffuse_total = vec3(0.0, 0.0, 0.0);
    vec3 specular_total = vec3(0.0, 0.0, 0.0);

    for(int i = 0; i < c_numberOfLights; ++i)
    {
        if(i < u_numberOfLights)
        {
            float light_intensity = u_lightData1[i].x;
            float attenuation = light_intensity;
            float effect = 1.0;
            
            vec3 lightDirection = normalize(u_lightDirection[i]);
            vec3 vertexToLightDirection = -lightDirection;
            
            if(u_lightData0[i].x > 0.01) // point light or spot light.
            {
                vec3 vertexToLight = u_lightPosition[i] - ps_vertexPosition;
                vertexToLightDirection = normalize(vertexToLight);
                float light_rang = u_lightData1[i].y;
                attenuation = light_intensity * clamp((light_rang - length(vertexToLight)) / light_rang, 0.0, 1.0);
                if(u_lightData0[i].x > 1.01)
                {
                    float cos_outer_cone = u_lightData1[i].z; // cos(radians_for_outer_cone_);
                    float cos_inner_cone = u_lightData1[i].w; // cos(radians_for_int_cone);
                    float con = dot(lightDirection, -vertexToLightDirection);
                    effect = smoothstep(cos_outer_cone, cos_inner_cone, con);
                }
            }
            
			vec3 vertexNormal = normalize(ps_vertexNormal);
            float ndl = Lambert(vertexNormal, vertexToLightDirection, u_lightData0[i].y);
            vec3 diffuse = effect * u_materialDiffuse * u_lightDiffuse[i] * ndl;
            diffuse_total += attenuation * diffuse * texture2D(sampler_diffuse, ps_textureCoord).xyz;

            vec3 h = vertexToLightDirection + normalize(u_eyePosition - ps_vertexPosition);
            h = normalize(h);
			
            // u_materialData0.x is material shininess.
            vec3 specular = effect * u_materialSpecular * u_lightSpecular[i] * 
                            pow(max(0.0, dot(vertexNormal, h)), u_materialData0.x); 

            specular_total += attenuation * specular;
        }
    }

    gl_FragColor = vec4(ambient + diffuse_total + specular_total, 1.0);
}