////////////////////////////////////////
// Global variable
////////////////////////////////////////

precision highp float;

uniform sampler2D rtDepthSampler;

varying vec4 ps_vertexDiffuse;
varying	vec3 Vertex;
varying	vec4 LigViewPos;

uniform vec3 LightPosition;
uniform vec3 LightDirection;
uniform float spot_outer_cone;
uniform float spot_inner_cone;
uniform float bias;
uniform float use_depth_texture_OES;

uniform vec4 ambient;
uniform vec2 fViewportDimensions;

// unpack colour to depth value
float unpack (vec4 colour)
{
    const vec4 bitShifts = vec4(1.0 / (256.0 * 256.0 * 256.0),
                                1.0 / (256.0 * 256.0),
                                1.0 / 256.0,
                                1.0);
								
    return dot(colour , bitShifts);
}

float texture2DCompare(sampler2D depths, vec2 uv, float compare){
	float depth;
	if(use_depth_texture_OES <= 0.0)
	{
		depth = unpack(texture2D(depths, uv));
	}
	else
	{
		depth = texture2D(depths, uv).x;
	}
	return step(compare, depth);
}

float texture2DShadowLerp(sampler2D depths, vec2 size, vec2 uv, float compare)
{
   vec2 texelSize = 1.0/size;
   vec2 f = fract(uv*size+0.5);
   vec2 centroidUV = floor(uv*size+0.5)/size;

   float lb = texture2DCompare(depths, centroidUV+texelSize*vec2(0.0, 0.0), compare);
   float lt = texture2DCompare(depths, centroidUV+texelSize*vec2(0.0, 1.0), compare);
   float rb = texture2DCompare(depths, centroidUV+texelSize*vec2(1.0, 0.0), compare);
   float rt = texture2DCompare(depths, centroidUV+texelSize*vec2(1.0, 1.0), compare);
   float a = mix(lb, lt, f.y);
   float b = mix(rb, rt, f.y);
   float c = mix(a, b, f.x);
   return c;
}

float PCF(sampler2D depths, vec2 size, vec2 uv, float compare){
   float result = 0.0;
   for(int x=-1; x<=1; x++){
       for(int y=-1; y<=1; y++){
           vec2 off = vec2(x,y)/size;
           result += texture2DShadowLerp(depths, size, uv+off, compare);
       }
   }
   return result/9.0;
}

#define _1_DIV_PI 0.017453

////////////////////////////////////////
// Fragment Shader Function
////////////////////////////////////////
void main()
{	
	vec3 v2l_dir = normalize(LightPosition - Vertex);

	float cos_outer_cone = cos(clamp(spot_outer_cone, 0.0, 90.0)*_1_DIV_PI);
	float cos_inner_cone = cos(clamp(spot_inner_cone, 0.0, 90.0)*_1_DIV_PI);
   
	float con = dot(normalize(LightDirection), -v2l_dir);
	float effect = smoothstep(cos_outer_cone, cos_inner_cone, con);
	float shadow = 1.0;
	if(effect > 0.0)
	{
		float d1 = LigViewPos.z / LigViewPos.w;
	  
		vec2 st = vec2(LigViewPos.xy / LigViewPos.w);
		st = (st + 1.0) /2.0;
	  
		//shadow = PCF(rtDepthSampler, fViewportDimensions, st, d1 - bias * 0.01);
		shadow = texture2DCompare(rtDepthSampler, st, d1 - bias * 0.01);
	}
	else
	{
		effect = 0.0;
	}
   
	gl_FragColor = ambient * ps_vertexDiffuse + shadow * effect * ps_vertexDiffuse;
}